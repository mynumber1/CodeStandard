C# .net 代码外观
1.	列宽
				代码列宽控制在110字符左右
2.	换行
				当表达式超出或即将超出规定列宽，遵循一下规则进行换行
					1、在逗号后换行
					2、在操作符前换行
					3、规则1优先于规则2
					Visual Studio 2010 格式化快捷键： Ctrl+e => d
3.	缩进
				缩进应该是每行一个Tab（4个空格），不要在代码中使用Tab字符
				Visual Studio 2010 格式化快捷键： Ctrl+e => d
4.	空行
				空行是为了将逻辑上相关联的代码分块，以便提高代码的可阅读性
				在以下情况下使用两个空行
					1、接口和类的定义之间
					2、枚举和类的定义之间
					3、类与类的定义之间

				在以下情况下使用一个空行
					1、方法与方法、属性与属性之间
					2、方法中变量声明与语句之间
					3、方法与方法之间
					4、方法中不同的逻辑块之间
					5、方法中的返回语句与其他的语句之间
					6、属性与方法、属性与字段、方法与字段之间
					7、注释与它注释的语句间不空行，但与其他的语句间空一行
					Visual Studio 2010 格式化快捷键： Ctrl+e => d
5.	空格
				在以下情况中要使用到空格
					1、 关键字和左括符 “(” 应该用空格隔开
					如：while (true)
					注意在方法名和左括符 “(” 之间不要使用空格，这样有助于辨认代码中的方法调用与关键字
					2、 多个参数用逗号隔开，每个逗号后都应加一个空格
					3、 除了 . 之外，所有的二元操作符都应用空格与它们的操作数隔开。一元操作符、++及--与操作 数间不需要空格
					a  +=  c  +  d;
					while  (d++  =  s++)
					PrintSize(“size is” + size + “\n”);
					4、  语句中的表达式之间用空格隔开
					如：
					for  (expr1;  expr2;  expr3)
					Visual Studio 2010 格式化快捷键： Ctrl+e => d
6.	括号
				1、  左括号“(” 不要紧靠关键字，中间用一个空格隔开
				2、  左括号“(”  与方法名之间不要添加任何空格
				3、  没有必要的话不要在返回语句中使用()
				如：
				if (condition)
					Array.Remove(1)
				return;
				Visual Studio 2010 格式化快捷键： Ctrl+e => d
7.	花括号
				1、 左花括号 “{” 放于关键字或方法名的下一行并与之对齐，如
				if (condition)
				{
				}
				public int Add(int x, int y)
				}
				{
				2、 左花括号 “{” 要与相应的右花括号 “}”对齐
				3、 通常情况下左花括号 “{”单独成行，不与任何语句并列一行
				4、 if、while、do语句后一定要使用{}，即使{}号中为空或只有一条语句，如
				if (somevalue == 1)
				{
					somevalue = 2;
				}
				else
				{
				  	somevalue = 3;
				}
				5、右花括号 “}” 后建议加一个注释以便于方便的找到与之相应的“{”，如
				while  (1)
				{
					if  (valid)
					{
					} //if valid
					else
					{
					} //not valid
				} //end forever
				Visual Studio 2010 格式化快捷键： Ctrl+e => d
6.3.3	注释
1.	注释概述
				1、  修改代码时，总是使代码周围的注释保持最新
				2、   在每个例程的开始，提供标准的注释样本以指示例程的用途、假设和限制很有帮助。注释样本应该是解释它为什么存在和可以做什么的简短介绍
				3、  避免在代码行的末尾添加注释
				4、  避免杂乱的注释，如一整行星号。而是应该使用空白将注释同代码分开
				5、  避免在块注释的周围加上印刷框。这样看起来可能很漂亮，但是难于维护
				6、  在部署发布之前，移除所有临时或无关的注释，以避免在日后的维护工作中产生混乱
				7、    如果需要用注释来解释复杂的代码节，请检查此代码以确定是否应该重构它。尽一切可能不注释难以理解的代码，而应该重构它。尽管一般不应该为了使代码更简单以便于人们使用而牺牲性能，但必须保持性能和可维护性之间的平衡
				8、 在编写注释时使用完整的句子。注释应该阐明代码，而不应该增加多义性
				9、  在编写代码时就注释，因为以后很可能没有时间这样做。另外，如果有机会复查已编写的代码，在今天看来很明显的东西六周以后或许就不明显了
				10、  避免多余的或不适当的注释，如幽默的不主要的备注
				11、  使用注释来解释代码的意图。它们不应作为代码的联机翻译
				12、  为了防止问题反复出现，对错误修复和解决方法代码总是使用注释，尤其是在团队环境中
				13、  对由循环和逻辑分支组成的代码使用注释。这些是帮助源代码读者的主要方面
				14、  在整个应用程序中，使用具有一致的标点和结构的统一样式来构造注释
				15、  在所有的代码修改处加上修改标识的注释
				16、  为了是层次清晰，在闭合的右花括号后注释该闭合所对应的起点
				namespace Langchao.Procument.Web 
				{
					xxxxx
				} //namespace Langchao.Procument.Web
2.	文档型注释
				该类注释采用.Net已定义好的Xml标签来标记，在声明接口、类、方法、属性、字段都应该使用该类注释，以便代码完成后直接生成代码文档，让别人更好的了解代码的实现和接口（Visual Studio 2010中快捷键为“///”），如
				///<summary>
				///对方法的说明，遵循注释原则
				///</summary>
				///<paramname="Message">参数说明</param>
				///<paramname="keys">参数说明</param>
				///<paramname="vis">参数说明</param>
				///<paramname="mode">参数说明</param>
				///<returns>返回说明</returns>
				publicstringAESEncryptionUntie(stringMessage,stringkeys,stringvis,intmode)
				{
				}
3.	类c注释
				该类注释用于
					1、 不再使用的代码
					2、 临时测试屏蔽某些代码
					 用法
				   		/*
			[修改标识]
			[修改原因]
   			. . . (the source code )
				  		*/
4.	单行注释
				该类注释用于
					1、 方法内的代码注释。如变量的声明、代码或代码段的解释。注释示例
					// 注释语句
					string str;
					2、 方法内变量的声明或花括号后的注释, 注释示例
					if ( 1 == 1)    //always true
					{
						str = “a”;
					} //always true
5.	注释标签
				注意：文档注释不能应用于命名空间
				http://msdn.microsoft.com/zh-cn/library/5ast78ax.aspx
6.3.4	声明
1.1.1.1.	每行声明数
				一行只建议作一个声明，并按字母顺序排列，如
				int level;   //推荐
				int size;    //推荐
				int x, y;    //不推荐
1.1.1.2.	初始化
				建议在变量声明时就对其做初始化，如
				int level = 0;
				string str = “”;
1.1.1.3.	位置
				1、变量建议置于块的开始处，不要总是在第一次使用它们的地方做声明，如
				public void test()
				{
					int int1 = 0;		//建议声明处
					if (click())
					{
						int int2 = 1;	//不建议声明处
					}
				}
				for 循环除外
				2、避免不同层次间的变量重名，如
				int int1;
				public void test()
				{
					if (click())
					{
						int int1 = 0;	//避免
					}
				}
1.1.1.4.	类和接口的声明
				1、在方法名与其后的左括号间没有任何空格
				2、左花括号 “{” 出现在声明的下行并与之对齐，单独成行
				3、方法间用一个空行隔开
1.1.1.5.	字段的声明
				字段声明时不要直接使用前缀为public或protected，原因是在维护二进制兼容性时字段不能被更改为属性，可以为字段提供get和set属性访问器，而不是使它们成为公共的。get 和 set 属性访问器中可执行代码的存在使得可以进行后续改进，如在使用属性或者得到属性更改通知时根据需要创建对象。下面的代码示例阐释带有get 和 set 属性访问器的私有实例字段的正确使用。 示例
				public class Control: Component
				{
					private int handle;
					public  int Handle
					{
						get
						{
							return handle; 
						}
					}
				}
6.3.5	命名规范
i.	命名概述
				名称应该说明“什么”而不是“如何”
				命名原则是：
					1、 选择正确名称时的困难可能表明需要进一步分析或定义项的目的
					2、 名称可以由两个或三个单词组成，但不应多于三个，控制在3至30个字母以内
					3、 名称采用全英文或全拼音，杜绝英文、拼音混合
					4、 名称应该能够标识事物的特性
					5、 名称尽量不使用缩写，除非它是众所周知的
				以下几点是推荐的命名方法：
					1、 只要适合，在变量名的末尾或开头加计算限定符 (Avg/Sum/Min/Max/Index)
					2、 在布尔变量命名时应该包含Is，这意味着Yes/No或True/False值，如 NameIsFound
j.	大小写规则
				标识符中的所有字母都是大写。仅对于有两个或者少字母组成的标识符使用该约定。例如
				System.IO
				System.Web.UI
				下表汇总了大写规则，并提供了不同类型的标识符的示例
标识符	大小写	示例
类	Pascal	OverOrder
枚举类型	Pascal	ErrorLevel
枚举值	Pascal	FatalError
事件	Pascal	ValueChange
异常类	Pascal	WebException
注意 总是以Exception后缀结尾
只读的静态字段	Pascal	MoneyClass
接口	Pascal	IOtherService
注意 总是以I前缀开始
方法	Pascal	ToString
命名空间	Pascal	System.Web
属性	Pascal	AdultNum
公共实例字段	Pascal	ChildNum
注意 很少使用 属性优于使用公共实例字段
受保护的实例字段	Camel	returnPay
注意 很少使用 属性优于使用受保护的实例字段
私有的实例字段	Camel	goPay
参数	Camel	isTure
方法内的变量	Camel	cityName

k.	缩写
				为了避免混淆和保证跨语言交互操作，请遵循有关区缩写的使用的下列规则：
					1、不要将缩写或缩略形式用作标识符名称的组成部分。例如，使用 GetWindow，而不要使用 GetWin
					2、不要使用计算机领域中未被普遍接受的缩写
					3、 在适当的时候，使用众所周知的缩写替换冗长的词组名称。例如，用 UI 作为 User Interface 缩写，用 OLAP 作为 On-line Analytical Processing 的缩写
					4、在使用缩写时，对于超过两个字符长度的缩写请使用 Pascal 大小写或 Camel 大小写。例如，使用 HtmlButton 或 HTMLButton。但是，应当大写仅有两个字符的缩写，如，System.IO，而不是 System.Io
					5、不要在标识符或参数名称中使用缩写
l.	命名空间 (NameSpace)
				1、命名命名空间时的一般性规则是使用领域名称，后跟技术名称和可选的功能与设计，如下所示
				DomainName.TechnologyName[.Feature][.Design]
				例如
				namespace Domain.AirCust.Login			//春秋会员登录
				namespace Domain.AirOrder.SeveOrder		//春秋保存订单
				2、命名控件使用Pascal大小写
				3、TechnologyName 指的是该项目的英文缩写，或软件名
				4、 命名空间和类不能使用同样的名字。例如，有一个类被命名为Debug后，就不要再使用Debug作为一个名称空间名
m.	类 (Class)
				1、使用 Pascal 大小写
				2、用名词或名词短语命名类
				3、使用全称避免缩写，除非缩写已是一种公认的约定，如URL、HTML
				4、不要使用类型前缀，如在类名称上对类使用 C 前缀。例如，使用类名称 FileStream，而不是 
CfileStream
				5、不要使用下划线字符 (_)
				6、 有时候需要提供以字母 I 开始的类名称，虽然该类不是接口。只要 I 是作为类名称组成部分的整个单词的第一个字母，这便是适当的。例如，类名称 IdentityStore 是适当的。在适当的地方，使用复合单词命名派生的类。派生类名称的第二个部分应当是基类的名称。例如，ApplicationException 对于从名为 Exception 的类派生的类是适当的名称，原因ApplicationException 是一种Exception。请在应用该规则时进行合理的判断
n.	接口 (Interface)
				以下规则概述接口的命名指南
					1、用名词或名词短语，或者描述行为的形容词命名接口。例如，接口名称 IComponent 使用描述
性名词。接口名称 ICustomAttributeProvider 使用名词短语。名称 IPersistable 使用形容词
					2、使用 Pascal 大小写
					3、尽量少用缩写
					4、给接口名称加上字母 I 前缀，以指示该类型为接口
					5、不要使用下划线字符 (_)
					6、当类是接口的标准执行时，定义这一对类/接口组合就要使用相似的名称。两个名称的不同之
处	只是接口名前有一个I前缀，以下是正确命名的接口的示例
					public interface IserviceProvider
					public interface Iformatable
					以下代码示例阐释如何定义 IComponent 接口及其标准实现 Component 类
					public interface Icomponent
					{
						// Implementation code goes here.
					}
					public class Component: Icomponent
					{
						// Implementation code goes here.
					}
o.	特性 (Attribute)
				应该总是将后缀 Attribute 添加到自定义属性类。以下是正确命名的属性类的示例
				public class ObsoleteAttribute
				{
				}
p.	枚举 (Enum)
				枚举 (Enum) 值类型从 Enum 类继承。以下规则概述枚举的命名指南
					1、对于 Enum 类型和值名称使用 Pascal 大小写
					2、尽量少用缩写
					3、不要在 Enum 类型名称上使用 Enum 后缀
					4、对大多数 Enum 类型使用单数名称，但是对作为位域的 Enum 类型使用复数名称
q.	参数
				1、使用描述性参数名称。参数名称应当具有足够的描述性，以便参数的名称及其类型可用于在大多数情况下确定它的含义
				2、对参数名称使用 Camel 大小写
				3、使用描述参数的含义的名称，而不要使用描述参数的类型的名称
				4、不要使用保留的参数
				以下是正确命名的参数的示例
				Type GetType(string typeName)
				string Format(string format, args() As object)
r.	方法 (Method)
				以下规则概述方法的命名指南
					1、使用动词或动词短语命名方法
					2、使用 Pascal 大小写
					以下是正确命名的方法的实例
					RemoveAll()
					GetCharArray()
					Invoke()
s.	属性 (property)
				以下规则概述属性的命名指南
					1、使用名词或名词短语命名属性
					2、使用 Pascal 大小写
					3、不要使用匈牙利语表示法
					4、考虑用与属性的基础类型相同的名称创建属性。例如，如果声明名为 Color 的属性，则属
性的类型同样应该是 Color。请参阅本主题中后面的示例
					以下代码示例阐释正确的属性命名
					public class SampleClass
					{
						public Color BackColor
						{
							// Code for Get and Set accessors goes here.
						}
					}
					以下代码示例阐释提供其名称与类型相同的属性
					public enum Color
					{
						// Insert code for Enum here.
					}
					public class Control
					{
						public Color Color
						{
							get
							{
								// Insert code here.
							}
							set
							{
								// Insert code here.
							}
						}
					}
t.	事件 (Event)
				以下规则概述事件的命名指南
					1、对事件处理程序名称使用 EventHandler 后缀
					2、指定两个名为 sender 和 e 的参数。sender 参数表示引发事件的对象。sender 参数始终是object 类型的，即使在可以使用更为特定的类型时也如此。与事件相关联的状态封装在名为 e 的事件类的实例中。对 e 参数类型使用适当而特定的事件类
					3、用 EventArgs 后缀命名事件参数类
					4、用动词命名事件
					5、使用动名词（动词的“ing”形式）创建表示事件前的概念的事件名称，用过去式表示事件后。例如，可以取消的 Close 事件应当具有 Closing 事件和 Closed 事件。不要使用
BeforeXxx/AfterXxx 命名模式
					6、不要在类型的事件声明上使用前缀或者后缀。例如，使用 Close，而不要使用 OnClose
					7、 通常情况下，对于可以在派生类中重写的事件，应在类型上提供一个受保护的方法（称为 OnXxx）。此方法只应具有事件参数 e，因为发送方总是类型的实例
					以下示例阐释具有适当名称和参数的事件处理程序
					public delegate void MouseEventHandler(object sender, MouseEventArgs e);
					以下示例阐释正确命名的事件参数类
					public class MouseEventArgs : EventArgs
					{
						int x;
						int y;
						public MouseEventArgs(int x, int y)
						{
							this.x = x;
							this.y = y; 
						}
						public int X
						{
							get
							{
								return x;
							}
						}
						public int Y
						{
							get
							{
								return y;
							}
						}
					}
u.	常量 (const)
				以下规则概述常量的命名指南
				所有单词大写，多个单词之间用 "_" 隔开。 如
				public const string PAGE_TITLE = "Welcome";
v.	字段
				以下规则概述字段的命名指南
					1、private、protected 使用 Camel 大小写
					2、public 使用 Pascal 大小写
					3、拼写出字段名称中使用的所有单词。仅在开发人员一般都能理解时使用缩写。字段名称不
					要使用大写字母。下面是正确命名的字段的示例
					class SampleClass
					{
						string url;
						string destinationUrl;
					}
					4、不要对字段名使用匈牙利语表示法。好的名称应描述语义，而非类型
					5、不要对字段名或静态字段名应用前缀。具体说来，不要对字段名称应用前缀来区分静态和非静态字段。例如，应用 g_ 或 s_ 前缀是不正确的
w.	静态字段
				以下规则概述静态字段的命名指南
					1、使用名词、名词短语命名静态字段
					2、使用 Pascal 大小写
					3、对静态字段名称使用匈牙利语表示法前缀
					4、建议尽可能使用静态属性而不是公共静态字段
x.	集合
				集合是一组组合在一起的类似的类型化对象，如哈希表、查询、堆栈、字典和列表，集合的命名建议用复数
y.	措辞
				避免使用与常用的 .NET 框架命名空间重复的类名称。例如，不要将以下任何名称用作类名称：System、Collections、Forms 或 UI。有关 .NET 框架命名空间的列表，请参阅类库。
				另外，避免使用和以下关键字冲突的标识符
AddHandler	AddressOf	Alias	And	Ansi
As	Assembly	Auto	Base	Boolean
ByRef	Byte	ByVal	Call	Case
Catch	CBool	CByte	Cchar	CDate
CDec	CDbl	Char	Cint	Class
CLng	CObj	Const	Cshort	CSng
CStr	CType	Date	Decimal	Declare
Default	Delegate	Dim	Do	Double
Each	Else	ElseIf	End	Enum
Erase	Error	Event	Exit	ExternalSource
False	Finalize	Finally 	Float	For
Friend	Function	Get	GetType	Goto
Handles	If	Implements	Imports	In
Inherits	Integer	Interface	Is	Let
Lib	Like	Long	Loop	Me
Mod	Module	MustInherit	MustOverride	MyBase
MyClass	Namespace	New	Next	Not
Nothing	NotInheritable	NotOverridable	Object	On
Option	Optional	Or	Overloads	Overridable
Overrides	ParamArray	Preserve	Private	Property
Protected	Public	RaiseEvent	ReadOnly	ReDim
Region	REM	RemoveHandler	Resume	Return
Select	Set	Shadows	Shared	Short
Single	Static	Step	Stop	String
Structure	Sub	SyncLock	Then	Throw
To	True	Try	TypeOf	Unicode
Until	volatile	When	While	With
WithEvents	WriteOnly	Xor	Eval	extends
instanceof	package	var	   	   

6.3.6	语句
6.2.6.1	每行一个语句
				每行最多包含一个语句。如
				a++;       //推荐
				b--;       //推荐
				a++; b--;  //不推荐
6.2.6.2	复合语句
				复合语句是指包含"父语句{子语句;子语句;}"的语句，使用复合语句应遵循以下几点
					1、子语句要缩进
					2、左花括号“{” 在复合语句父语句的下一行并与之对齐，单独成行
					3、即使只有一条子语句要不要省略花括号“ {}”。 如
					while  (d + =  s++)
					{
						n++;
					}
6.2.6.3	return语句
				return语句中不使用括号，除非它能使返回值更加清晰。如
				return;
				return myDisk.size();
				return (size ? size : defaultSize);
6.2.6.4	if/if-else/if else-if 语句
				if、 if-else、if else-if 语句使用格式
				if (a == b) 
				{
					c = null;
				}

				if (a == b)
				{
					c = null;
				}
				else
				{
					c = “”;
				}

				if (a == b)
				{
					c = 1;
				}
				else if (a != b) 
				{
					c = 2;
				}
				else
				{
					c = 3;
				}
6.2.6.5	for/foreach 语句
				for 语句使用格式
				for (int i=0 ; i<length ; i++) 
				{
					a = a + b;
				}
				foreach (var item in collection)
				{
					statements;
				}
				注意
					1、在循环过程中不要修改循环计数器
					2、对每个空循环体给出确认性注释
6.2.6.6	while 语句
				while 语句使用格式
				while (condition)
				{
					statements;
				}
				空的 while 语句使用格式
				while (condition)
6.2.6.7	do-while 语句
				do - while 语句使用格式
				do
				{
					statements;
				} while (condition)
6.2.6.8	switch-case 语句
				switch - case  语句使用格式
				switch (condition)
				{
					case 1:
						statements;
						break;
					case 2:
						statements;
						break;
					default:
						statements;
						break;
				}
				注意
					1、语句switch中的每个case各占一行
					2、语句switch中的case按字母顺序排列
					3、为所有switch语句提供default分支
					4、所有的非空 case 语句必须用 break; 语句结束
6.2.6.9	try-catch 语句
				try - catch  语句使用格式
				try
				{
					statements;
				}
				catch (Exception e)
				{
					statements;
				}
6.2.6.10	using 块语句
				using 块语句使用格式
				using (object)
				{
					statements;
				}
6.2.6.11	goto 语句
				goto 语句使用格式
				goto Label1:
					statements;
				Lable1:
					statements;
6.3.7	.net基础使用
			1、对于需要拼接的字符串，使用StringBuilder代替string，减少内存消耗，示例
				StringBuilder test = new StringBuilder();
				test.Append(“t1”);
				test.Append(“t2”);
				输出test为t1t2
			2、对于需要在字符串中插入变量的，使用string.Format()代替string，示例
				string test = “”;
				string t1 = “a”;
				string t2 = “b”;
				test = string.Format(“xx{0}xx{1}xx”,t1,t2);
				输出test为xxaxxbxx
6.3.8	异常
			6.2.9.1异常监测
				在编写任何方法时必须使用try-catch捕获异常
			6.2.9.2异常处理
				捕获到异常后请逐层向上抛出，每层必须对已经捕获到的异常进行处理，如无法向上抛出异常，请详细记录日志
			6.2.9.3异常记录
				捕获到的异常必须使用log4net进行记录，详细记录格式请参看6.2.9日志记录
6.3.9	日志记录
			6.2.9.1产品查询日志
				1、在catch到错误后标记错误方法中文注解同时记录 e.Massege和 e.StackTrace，格式为
					LogService.SearchError("[XXXX方法异常]:" + ex);
				2、调用接口前记录传入对象的JSON串，格式为
					LogService.SearchInfo("[XXXX接口调用开始]  操作人:" + Session["userid"] + ";IP地址: " + user_IP + "; 接口传入信息: " + form.ToJSON());
				3、调用接口后记录返回对象的JSON串
					LogService.SearchInfo("[XXXX接口调用结束]  操作人:" + Session["userid"] + ";IP地址: " + user_IP + "; 接口传出信息: " + form.ToJSON());
				4、以上2、3两点由开关控制，开关配置在配置文件中，在需要时开启，默认关闭
			6.2.9.2产品预定日志
				1、在catch到错误后标记错误方法中文注解同时记录 e.Massege和 e.StackTrace，格式为
					LogService.OrderError("[XXXX方法异常]:" + ex);
				2、顾客信息对象收集到后马上记录对象的JSON串
					LogService.OrderInfo("[XXXX信息确认]  操作人:" + Session["userid"] + ";IP地址: " + user_IP + ";XX预定信息: " + form.ToJSON());
				3、调用接口前记录传入对象的JSON串
					LogService.OrderInfo("[XXXX下单前调用开始]  操作人:" + Session["userid"] + ";IP地址: " + user_IP + "; 接口传入信息: " + form.ToJSON());
				4、调用接口后记录返回对象的JSON串
					下单接口报错: LogService.OrderError("[XXXX下单接口报错]  操作人:" + Session["userid"] + ";IP地址: " + user_IP + "; 接口传出信息: " + form.ToJSON());
					下单接口成功: LogService.OrderInfo("[XXXX下单后调用结束]  操作人:" + Session["userid"] + ";IP地址: " + user_IP + ";接口传出信息: " + form.ToJSON());
				5、以上2、3、4三点由开关控制，开关配置在配置文件中，默认开启
			6.2.9.3产品支付日志
				1、在catch到错误后标记错误方法中文注解同时记录 e.Massege和 e.StackTrace，格式为
					提交:
					LogService.PayError("[XXXX方法异常]:" + ex);
					应答:
					LogService.PayError("XXXX前台(或后台)支付应答异常:" + resStr + ";" + ex);
				2、支付提交
					LogService.PayInfo("[XXXX开始提交信息]  订单号:" + OrderNo + ";商户号:" + PayAccount + ";支付流水号:" + PayIPS + ";金额:" + OrderMoney);	
				3、支付应答
					支付前台应答:
					a. 接到应答后记录原始应答串，LogService.PayInfo("[XXXX前台应答开始]:" + resStr);
					记录应答串日志统一用缓存变量NameValueCollection resStr = Request.QueryString.Count > 0 ? Request.QueryString : Request.Form;
					b. 在应答的每一步需要调用接口时，都必须记录接口是否调用成功，且记录调用接口传入传出对象的JSON串，格式为
					LogService.PayInfo("[XXXX前台应答开始XXXX接口调用开始] 订单号:" + OrderNo  + ";商户号:" + PayAccount + ";支付流水号:" + PayIPS + ";金额:" + OrderMoney + ";接口传入信息:" + form.ToJSON());
					LogService.PayInfo("[XXXX前台应答开始XXXX接口调用结束] 订单号:" + OrderNo  + ";商户号:" + PayAccount + ";支付流水号:" + PayIPS + ";金额:" + OrderMoney + ";接口传入信息:" + form.ToJSON());
					c. 应答成功请记录成功信息
					LogService.PayInfo("[XXXX前台应答成功] 订单号:" + OrderNo  + ";商户号:" + PayAccount + ";支付流水号:" + PayIPS + ";金额:" + OrderMoney);
					d. 应答失败请记录失败信息
					LogService.PayInfo("[XXXX前台应答成功] 订单号:" + OrderNo  + ";商户号:" + PayAccount + ";支付流水号:" + PayIPS + ";金额:" + OrderMoney + 验签字符串，数字签名串，应答串);
				支付后台应答:
					a. 后台应答记录与前台应答记录相同，但是所有的标题中“前台”字样更换为“后台”字样
			6.2.9.4其他日志
				所有方法均需记录catch到的错误，格式为
				LogService.OtherError("[XXXX方法异常]:" + ex);
				所有与数据库交互的执行失败，也要进行记录，格式为
				LogService.SqlError("[XXXX数据库语句执行失败]  错误信息:" + 数据库执行错误信息 + "参数:" + 数据库执行时所需的参数);
6.3.10	ADO .NET 操作规范
			统一使用已经被封装完毕的DBHelper类
